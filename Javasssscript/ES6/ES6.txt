1. Sử dựng let và const thay cho var.
    scope của let và count: block-scope.
2. chế độ strict mode <chế độ nghiệm ngặt>.
3. Cách viết hàm không tái sử dụng một cách ngắn hơn theo cấu trúc:
    *hàm chỉ có mục đích trả về giá trị cho biến greeting.
    const greeting = () => {
        anything;
    }
    *<parameter> Có thể đặt tham số <mặc định> cho số truyền vào bằng cú pháp:
    const greeting = (a = 10) => {
        anything;
    }    
    *<rest parameter> cú pháp: ...arr gọi là mã hóa để mảng bình thường thành dạng được cách nhau bởi dấu phẩy.
    Truyền vào một mảng gồm nhiều đối số với cú pháp:
    const greeting = (...args) => {
        anything;
    }
    *cách viết hàm không tái sử dụng và return ngắn:
    const greeting = (a,b) => {(a+b)/2};

/<Spread Operator>
    Với ES5 để tìm giá trị lớn nhất của mảng chúng ta dừng hàm:
    var arr = [6. 89, 3, 45];
    var maximus = Math.max.applay(null, arr);
    Kết quả nhân được là maximus = 89;
    Với ES6 chúng ta có thể thay thế bằng code ngắn và dễ hiểu hơn:
    const maximus = Math.max(...arr);
    Cú pháp ...array sẽ không trả về như bình thường <có vẻ là thành 1 chuỗi và bỏ đi các dấu phẩy và dấu ngoặc>

/<destructuring Asingment> 
    Là một cú pháp đặc biệt được giới thiệu trong ES6 gán giá trị được lấy trực tiếp từ một đối tượng một cách gọn gàn hơn.
    *ES5 code: 
    const user = { 
        name: 'John Doe',
        age: 34
    };
    const name = user.name;
    const age = user.age;
    *ES6 code:
    //const {name, age} = user;
    tự tạo một 2 biến tên name, age và lất value từ user.name và user.age.

/<destructuring Asignment to Assign variables from object>
    //const {name: userName, age: userAge} = user;
    -> tạo ra 2 biến userName, userAge với giá trị lần lươt là user.name và user.age.
    -> gán cho một biến bên ngoài được lấy giá trị từ 1 thuộc tính của 1 Object.
    +> Trường hợp cho code lồng :
    ví dụ:
    const user = {
        johnDoe: {
            age: 34,
            email: 'johnDoe@freecodecamp.com'
        }
    };
    -> gán: !<mình cũng lồng theo nó luôn :))>
        //const { johnDoe: { age: userAge, email: userName}} = user;
/<destructuring Asingment to Assign Variables from array> gán giá trị cho mảng.
    có thể gán giá trị mảng bằng cú pháp: 
    //const[a,b] = [1,2,3,4,5];
    => a = 1, b = 2;

    //const [a, b,,, c] = [1, 2, 3, 4, 5, 6];
    => a = 1; b = 2; c = 5;
    
    //const [,,...arr] = [1, 2, 3, 4, 5];
    => arr = [3, 4, 5]

/<Use Destructuring assignment to Pass an Object as a Function's Parametaers>
    Thay vì: 
    const profileUpdate = (profileData) => {
        const {name, age, nationality, location} = profileData;
    }
    Có thể thay bằng:
    const profileUpdate = ({name, age, nationality, location}) => {}

/<Tempalte Literals> Một dạng đặt biệt của chuỗi.
    1.Thay vì sử dụng dấu ' hoặc ", chúng ta sử dụng ` kết hợp ${variables}.
    *code mẫu: 
    person = {
        name: "Zodiac Hasbro",
        age: 56
    };
    const greeting = `Hello, my name is ${person.name}!
    I am ${person.age} years old.`;

/<Write Concise Object Literal Declaretions Using Object Property ShortHand>
    viết hàm trả về 1 object.
    Thay vì viết:
    const getMousePosition = (x,y) => ({
        x:x,
        y:y
    });
    Ta viết: 
    const setMousePosition = (x,y) => ({x,y});

/<Write concise declarative function with ES6> xác đinh giá cho một thuộc tính của đối tượng bằng function.
    *cú pháp ES5:
    const person = {
        name: "Taylor",
        sayHello: function() {
            return `Hello! My name is ${this.name}.`;
        }
    }
    *Cú pháp với ES6: 
    const person = {
        name: "Taylor",
        sayHello() {
            return `Hello! My name is ${this.name}.`;
        }
    };
//constructor function vaf class.<constructor: khuôn mẫu> 
    ***Dùng construct function:
    
/<Use class syntax to define a constructor function> sử dụng class keyword mới của es6 để tạo một đối tượng.
    *cú pháp trong ES5:
    var SpaceShuttle = function(targetPlanet) {
        this.targerPlanet = targetPlanet;
    }
    var zeus = new SpaceShuttle('Jupiter");
    *class Syntax :
    class SpaceShuttle {
        constructor(targetPlanet) {
            this.targetPlanet = targetPlanet;
        }
    }
    const zeus = new SpaceShuttle('Jupiter');
/<Use getters and setters to Control Access to an Object> 
    Getters và Setters là các hàm hoặc phương thức dduojc sử dựng để lấy và đặt các giá trị của biến.
    **với Methods.
    Vì getters và setters về cơ bản là các hàm tim nạp/ thay đổi giá trị, có nhiều hơn một cách để tạo và sử dụng.
    /cách 1: 
    let obj  = {
        foo:  'this is the value of foo',
        getFoo: function() {
            return this.foo;
        },
        setFoo: function(val) {
            this.foo = val;
        }
    }
obj.setFoo('hello something change'); // setter giá chị cho obj.Foo
console.log(obj.getFoo()); //getter giá trị của obj.Foo.
    **với Keyword:
    Một cách chính thức hơn và mạnh mẽ hỡn để tạo ra getters và setters set
    là bằng cách sử dụng từ khóa set và get. Để tạo một getter, và đặt từ khóa get trước
    một khai báo hàm sẽ đóng vai trò là phuong thức getter và sử dựng từ khóa set
    theo cùng một cách để tạo một setter.

    let obj = {
        fooVal: 'this is the value of foo',
        get foo() {
            return this.fooVal;
        },
        set foo(val) {
            this.fooVal = val;
        }
    }

    obj.foo = 'lalalalal'; // sử dụng hàm set đêt gán giá trị cho obj.fooVal
    console.log(obj.foo);
    
    *** bảo vệ giữ liệu bằng cách sử dụng block scoping:
    sử dụng tính chất block scope của let và cho đoạn khai báo đối tượng vòa bên trong dấu ngoặc {}.
    /note: Nên thêm một cmt trước block muốn tạo.

    code:
    /* BLOCK SCOPE, leave the braces alone!*/
    {
        let fooVal = 'this is the value of foo';
        var obj = {
            get foo() {
                return fooval
            },
            set foo() {
                fooVal = val;
            }
        }
    }
    console.log(obj.foo); // "this is the value of foo"
    * nếu muốn thay đổi ta sử dụng cú pháp:+
    obj.foo = 'something';
    console.log(obj.foo); //ouput: sonething.

    ***bảo vệ dữ liệu bằng function scoping
        /Là cách phổ biến hơn với phạm vi là bằng cách giữ liệu bên trong một hàm và trả về một 
        đối tượng với các getters và setters từ hàm đó. 

        code: 
        function myobj() {
            let fooVal = 'this is the value of foo';
            return {
                get foo() {
                return fooVal;
                }, 
                set foo(val) {
                fooVal = val;
                }
            }
        }

        let obj = myobj();
        console.log(obj.foo); //output: this is the value of foo
        obj.foo = 'something is change';
        console.log(obj.foo); //output: something is change
    ***NO scope***
    Logic: làm thế nào bạn có thể thay đổi được giữ liệu nếu bạn không biết những gì được gọi đến.
    code: 
     let obj - {
         s8182819812398123c: 'this is the value of foo',
         get foo() {
             return this.s8182819812398123c;
         },
         set foo(val) {
             this.s8182819812398123c = val;
         }
     }

     console.log(obj.foo);
    
     //output: "this is the value of foo"

     ***freecodecamp***
     class book {
         constructor(author)  {
             this._author = author;
         }
         get writer() {
             return this._author;
         }
         set writer(val) {
             this._author = val;
         }
     }

//Create a Module Script
    cách thêm một module vào html:
    tạo thẻ script:
    <script type="module" src="index.js"></script>

//Use expirt to Share a Code Block.
    ***Sử dụng từ khóa export:
    Cách 1: 
    export const add = (x,y) => {(x + y)}
    Cách 2: 
    const add = (x,y) => {
        return x + y;
    }
    export {add}; 

    *** cách import:
    import {add} from "./fmaksjdfksdf.js";

//Use * to Import Everthing from a File.

    import * as nameObject form "index.js";

    ** ở đây sẻ tạo ra một Object có tên là "nameObject" chưa các thuộc tính là tất cả các export của file nguồn.

//Create an export Fallback with export default.
    export default:
    export default function add(x, y) {
        return x + y;
    }

    
    export default add(x, y) {
        return x + y;
    }

    **export default mỗi file chỉ được phép có 1.

//Import a default Export.
import add from "./index.js";
***khác với import bình thường cần dấu {}, có thể sử dụng bất cứ tên nào cho import từ export default.

//Create a Javascript Promise.
    const makeServerRequest = new Promise((resolve, reject) => {

    });

    const uPromise = new Promise ((resolve, reject) => {
        if (condition here) {
            resolve("promise was fulfilled");
        } else {
            reject("Promise was rejected");
        }
    });
